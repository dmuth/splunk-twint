#!/bin/bash
#
# Download and run the Twint Docker image to capture a specific user's tweets.
#

# Errors are fatal
set -e

#
# Are we running the full version? (Lite version by default)
#
NAME="dmuth1/twint"
FULL=""
if test "$1" == "full"
then
	NAME="dmuth1/twint-full"
	FULL="full"
	shift
fi

#
# Sanity check for our username.
#
if test ! "$1"
then
	echo "! "
	echo "! Syntax: $0 username [ options ]"
	echo "! "
	exit 1
fi

USERNAME=$1
shift

#
# Check to see if we have our image. If we don't, fetch it.
#
# TODO: In the future, I should add some logic to try fetching 
#	again if the image is too old.
#
IMAGE=$(docker images | egrep "^${NAME} " | grep latest || true)

if test ! "${IMAGE}"
then
	echo "# Docker image ${NAME} not found, downloading..."
	docker pull ${NAME}
fi

ARGS_STR=$(echo $@ | sed -e s/[^A-Za-z0-9-]/_/g)
TWEETS="tweets-${ARGS_STR}.json"

#
# Make sure our directory exists and set a destination.
#
mkdir -p logs/user/${USERNAME}
OUTPUT=logs/user/${USERNAME}/${TWEETS}

#
# Set up our resume file
#
RESUME="resume-user-${USERNAME}-${ARGS_STR}.txt"

#
# Now run our image with the passed in arguments.
# Point /mnt to the current directory so files can be written.
#
echo "# "
echo "# You are running Twint Splunk, built from: https://github.com/dmuth/twint-splunk"
echo "# Go to https://github.com/twintproject/twint for the official webpage and documentation."
echo "# "
echo "# Downloading tweets from Twitter user '${USERNAME}' to file '${OUTPUT}'"
echo "# Resume file: ${RESUME}"
echo "# "
if test "$#"
then
	echo "# Additional args: $@"
	echo "#"
fi

docker run -v $(pwd):/mnt ${NAME} -u ${USERNAME} -o ${OUTPUT} --resume ${RESUME} --json $@

#
# After a successful run, we don't need our resume file anymore.
#
rm -f $RESUME


